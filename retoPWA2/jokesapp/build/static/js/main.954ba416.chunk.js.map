{"version":3,"sources":["logo.svg","Joke.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["pub","Joke","useState","joke","setJoke","useEffect","navigator","onLine","url","URL","params","ts","hash","md5","apikey","search","URLSearchParams","fetch","then","res","json","console","log","data","results","localStorage","setItem","JSON","stringify","getItem","parse","length","map","heroe","ker","name","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"0MAAe,I,4BCGTA,EAAM,mCA2CGC,MAzCf,WAAiB,IAAD,EACYC,mBAAS,IADrB,mBACLC,EADK,KACCC,EADD,KA2BV,OAzBFC,qBAAU,WACN,GAAIC,UAAUC,OAMP,CACH,IAAMC,EAAM,IAAIC,IAAI,oDAEhBC,EAAS,CACTC,GAAG,OACHC,KAHSC,IAAI,+CAAYb,GAIzBc,OAAQd,GAGZQ,EAAIO,OAAS,IAAIC,gBAAgBN,GACjCO,MAAMT,GAAKU,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAAQF,MAAK,SAAAC,GAClCE,QAAQC,IAAIH,EAAII,KAAKC,SACrBpB,EAAQe,EAAII,KAAKC,SACjBC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUT,EAAII,KAAKC,kBAlBrB,OAAjCC,aAAaI,QAAQ,QACpBzB,EAAQ,cAERA,EAAQuB,KAAKG,MAAML,aAAaI,QAAQ,YAkBjD,IAGC,gCACI,sCACF,wCAAW1B,EAAK4B,OAAhB,aACC5B,EAAK6B,KAAI,SAACC,GACP,OACE,qBAAKC,IAAOD,EAAME,KAAlB,SAAyBF,EAAME,cCzBhCC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCIAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BxC,UAAUyC,cACPC,SAASH,GACT3B,MAAK,SAAC+B,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfhD,UAAUyC,cAAcQ,YAI1BlC,QAAQC,IACN,+GAKEwB,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlB5B,QAAQC,IAAI,sCAGRwB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,WAO5BS,OAAM,SAACC,GACNtC,QAAQsC,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFSnB,SAAkB1B,GACvB,GAA6C,kBAAmBxC,UAAW,CAGzE,GADkB,IAAIG,IAAIgE,GAAwBjC,OAAOC,SAASiC,MACpDC,SAAWnC,OAAOC,SAASkC,OAIvC,OAGFnC,OAAOoC,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM4B,GAAN,sBAEPnC,IAgEV,SAAiCO,EAAOC,GAEtC7B,MAAM4B,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B3D,MAAK,SAAC4D,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5E,UAAUyC,cAAcoC,MAAMjE,MAAK,SAAC+B,GAClCA,EAAamC,aAAalE,MAAK,WAC7BsB,OAAOC,SAAS4C,eAKpBzC,EAAgBC,EAAOC,MAG1BY,OAAM,WACLrC,QAAQC,IAAI,oEAtFVgE,CAAwBzC,EAAOC,GAI/BxC,UAAUyC,cAAcoC,MAAMjE,MAAK,WACjCG,QAAQC,IACN,+GAMJsB,EAAgBC,EAAOC,OE/B/ByC,GAKA3B,M","file":"static/js/main.954ba416.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useEffect, useState } from 'react';\r\nimport md5 from \"md5\";\r\nconst priv = \"db7411c373daed25ddb85f69416f0d318d54566f\";\r\nconst pub = \"7890b18300881889e9d72a4cd695d32d\";\r\n\r\nfunction Joke (){\r\n    const [joke, setJoke] = useState([]);\r\n    useEffect(()=>{\r\n        if(!navigator.onLine){\r\n            if(localStorage.getItem(\"joke\") === null) {\r\n                setJoke(\"Loading...\")\r\n            } else {\r\n                setJoke(JSON.parse(localStorage.getItem(\"joke\")));\r\n            }\r\n        } else {\r\n            const url = new URL(\"https://gateway.marvel.com/v1/public/characters?\");\r\n            let hashed = md5(\"Hola\"+priv+pub);\r\n            let params = {\r\n                ts:\"Hola\",\r\n                hash: hashed,\r\n                apikey: pub\r\n\r\n            };\r\n            url.search = new URLSearchParams(params);\r\n            fetch(url).then(res=>res.json()).then(res=>{\r\n                console.log(res.data.results)\r\n                setJoke(res.data.results);\r\n                localStorage.setItem(\"joke\", JSON.stringify(res.data.results));\r\n            })\r\n        }\r\n    }, []);\r\n\r\n      return (\r\n        <div>\r\n            <h1>Joke</h1>\r\n          <p>Loaded {joke.length} heroes</p>\r\n          {joke.map((heroe) =>{\r\n              return(\r\n                <div ker = {heroe.name}>{heroe.name}</div>\r\n              );\r\n          })}\r\n          \r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Joke;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Joke from \"./Joke\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Joke></Joke>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}